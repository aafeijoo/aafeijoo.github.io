---
layout: post
title: "Conversion of geographic coordinates to pixels"
date: 2013-01-05 16:01:36
categories: source code
tags: c++ gis
---

The easiest way to implement a Geographic Information System is to use a projection where the Earth is divided on an equal latitude-longitude grid spacing. E.g. Plate Carr√©e.

![Equirectangular projection of the Earth](/assets/images/articles/2013-01-05-geotopx/geotopx_geo.jpg)

Therefore, geographical coordinates represented by decimal values have to be mapped to pixels represented by integer values.

![Division of the Earth in pixels](/assets/images/articles/2013-01-05-geotopx/geotopx_px.jpg)

So, the conversion from geographic coordinates to pixels will be perfomed as following:

{% highlight c++ %}
unsigned int px_left = static_cast<unsigned int>(round_to_nearest_int((geo_left - c_earth_left) / resolution));
unsigned int px_bottom = static_cast<unsigned int>(round_to_nearest_int((geo_bottom - c_earth_bottom) / resolution));
unsigned int px_right = static_cast<unsigned int>(round_to_nearest_int((geo_right - c_earth_left) / resolution) - 1);
unsigned int px_top = static_cast<unsigned int>(round_to_nearest_int((geo_top - c_earth_bottom) / resolution) - 1);
{% endhighlight %}

Where Earth boundaries are defined as constants:

{% highlight c++ %}
const double c_earth_left = -180.0;
const double c_earth_bottom = -90.0;
const double c_earth_right = 180.0;
const double c_earth_top = 90.0;
{% endhighlight %}

The function to round a number to its nearest integer is implemented adding 0.5 and truncating the result.

{% highlight c++ %}
int round_to_nearest_int ( double number )
{
    return static_cast<int>(number + 0.5);
}
{% endhighlight %}

And the opposite, to convert from pixels to geographic coordinates:

{% highlight c++ %}
double geo_left = c_earth_left + static_cast<double>(px_left) * resolution;
double geo_bottom = c_earth_bottom + static_cast<double>(px_bottom) * resolution;
double geo_right = c_earth_left + static_cast<double>(px_right + 1) * resolution;
double geo_top = c_earth_bottom + static_cast<double>(px_top + 1) * resolution;
{% endhighlight %}

References:

* [Wikipedia - Equirectangular projection](http://en.wikipedia.org/wiki/Equirectangular_projection)
* [NASA - Visible Earth](http://visibleearth.nasa.gov/)
